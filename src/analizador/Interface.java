/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package analizador;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jpcap.*;
import jpcap.packet.Packet;


/**
 *
 * @author Gregorio
 */
public class Interface extends javax.swing.JFrame {
//    Vector<ConectionData> dataConection;
    private Vector<Vector> dataConection;
    private Vector<PacketCapturate> packetCapturate;
    private DefaultTableModel tableConnection;
    private NetworkInterfaceSelect networkInterface;
    private ThreadSniffing sniffing;
    private boolean sniffingIsStart;
    
    /**
     * Creates new form Interface
     */
    @SuppressWarnings("empty-statement")
    public Interface() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setPreferredSize(screenSize);
        setMinimumSize(screenSize);
        initComponents();
         
        // Define table model
        dataConection = new Vector<Vector>(0);
        Vector<String> columnName = new Vector<String>(6, 0);
        String[] name = {"Time", "Source", "Destination", "Protocol", "Length", "Data"};
        columnName.add(0, "Time"); 
        columnName.add(1, "Source"); 
        columnName.add(2, "Destination"); 
        columnName.add(3, "Protocol"); 
        columnName.add(4, "Length"); 
        columnName.add(5, "Info");
        tableConnection = new DefaultTableModel(dataConection, columnName);
        jTableConnection.setModel(tableConnection);
        
        networkInterface = new NetworkInterfaceSelect();
        sniffing = null;
        sniffingIsStart = false;
        packetCapturate = new Vector<PacketCapturate>(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConnection = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuStart = new javax.swing.JMenu();
        jMenuItemStartSniffing = new javax.swing.JMenuItem();
        jMenuItemChangeNetwork = new javax.swing.JMenuItem();
        jMenuItemPrueba = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTableConnection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(jTableConnection);

        jMenuStart.setText("File");

        jMenuItemStartSniffing.setText("Start Sniffing");
        jMenuItemStartSniffing.setToolTipText("");
        jMenuItemStartSniffing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStartSniffingActionPerformed(evt);
            }
        });
        jMenuStart.add(jMenuItemStartSniffing);

        jMenuItemChangeNetwork.setText("Change Network");
        jMenuItemChangeNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChangeNetworkActionPerformed(evt);
            }
        });
        jMenuStart.add(jMenuItemChangeNetwork);

        jMenuItemPrueba.setText("Prueba");
        jMenuItemPrueba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPruebaActionPerformed(evt);
            }
        });
        jMenuStart.add(jMenuItemPrueba);

        jMenuBar1.add(jMenuStart);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemStartSniffingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStartSniffingActionPerformed
        // TODO add your handling code here:
        if (sniffingIsStart == false) 
        {
            if(networkInterface.getElement() == null){
                ListToSelectNetwork listNetworkToSelect = new ListToSelectNetwork(this, rootPaneCheckingEnabled);
                listNetworkToSelect.setVisible(true);
                networkInterface = listNetworkToSelect.getNetworkSelected();
                listNetworkToSelect.dispose();
            }
            if(networkInterface.getElement() != null){
                jMenuItemStartSniffing.setText("Stop Sniffing");
                sniffingIsStart = true;
                try {
                    Receiver packetReviever = new Receiver(this);
                    sniffing = new ThreadSniffing(networkInterface, packetReviever);
                } catch (IOException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
                sniffing.start();
            }
        } else if (sniffingIsStart == true){
            sniffingIsStart = false;
            sniffing.stopCapturing = true;
            jMenuItemStartSniffing.setText("Start Sniffing");
        }
    }//GEN-LAST:event_jMenuItemStartSniffingActionPerformed

    private void jMenuItemChangeNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChangeNetworkActionPerformed
        // TODO add your handling code here:
        ListToSelectNetwork listNetworkToSelect = new ListToSelectNetwork(this, rootPaneCheckingEnabled);
        listNetworkToSelect.setVisible(true);
        networkInterface = listNetworkToSelect.getNetworkSelected();
        listNetworkToSelect.dispose();
    }//GEN-LAST:event_jMenuItemChangeNetworkActionPerformed

    private void jMenuItemPruebaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPruebaActionPerformed
        // TODO add your handling code here:
        String hexa = Integer.toHexString(-108);
        System.out.print(hexa);
    }//GEN-LAST:event_jMenuItemPruebaActionPerformed

    public void updateTable(Vector<String> _rowTable, PacketCapturate _packet){
        dataConection.add(_rowTable);
        packetCapturate.add(_packet);
        tableConnection.fireTableDataChanged();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemChangeNetwork;
    private javax.swing.JMenuItem jMenuItemPrueba;
    private javax.swing.JMenuItem jMenuItemStartSniffing;
    private javax.swing.JMenu jMenuStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableConnection;
    // End of variables declaration//GEN-END:variables
}